{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","user","quotes","handleQuote","bind","assertThisInitialized","setState","Math","floor","random","length","_this2","FetchQuotes","then","data","randomColor","Colors","links","concat","quote","author","styles","col","color","back","background","react_default","a","createElement","id","style","title","target","href","class","onClick","React","Component","fetch","json","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAIMA,qBACH,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,IAERR,EAAKS,OAAST,EAAKS,OACnBT,EAAKU,YAAcV,EAAKU,YAAYC,KAAjBV,OAAAW,EAAA,EAAAX,CAAAD,IANHA,6EASjBG,KAAKU,SAAS,CACZL,KAAML,KAAKM,OAAOK,KAAKC,MAAMD,KAAKE,SAAWb,KAAKM,OAAOQ,uDAG1C,IAAAC,EAAAf,KACjBgB,IAAcC,KAAK,SAAAC,GACjBH,EAAKT,OAASY,EACdH,EAAKL,SAAS,CACZL,KAAMa,EAAKP,KAAKC,MAAMD,KAAKE,SAAWE,EAAKT,OAAOQ,8CAKtD,IAAIK,EAAcC,EAAOT,KAAKC,MAAMD,KAAKE,SAAWO,EAAON,SACvDO,EAAK,gFAAAC,OAAoFtB,KAAKI,MAAMC,KAAKkB,MAApG,UAAAD,OAAmHtB,KAAKI,MAAMC,KAAKmB,QACxIC,EAAS,CAACC,IAAI,CAACC,MAAOR,GAAcS,KAAK,CAACC,WAAWV,IACzD,OACEW,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,MAAOT,EAAOC,KAAM1B,KAAKI,MAAMC,KAAKkB,OACnDO,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAR,MAAqBjC,KAAKI,MAAMC,KAAKmB,QACrCM,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACNH,EAAAC,EAAAC,cAAA,KAAGC,GAAG,cAAcE,MAAM,oBAAoBC,OAAO,SAASC,KAAMhB,EAAOa,MAAOT,EAAOG,MAAME,EAAAC,EAAAC,cAAA,KAAGM,MAAM,mBACxGR,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYC,MAAOT,EAAOG,KAAKW,QAASvC,KAAKO,aAAxD,uBAjCMiC,IAAMC,YA2ClBzB,EAAc,kBAAM0B,MAC1B,0IACIzB,KAAK,SAAAC,GAAI,OAAIA,EAAKyB,SAAQ1B,KAAK,SAAAC,GAAI,OAAIA,EAAKZ,UAI1Cc,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAI1HzB,IC7CKiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,YD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.69f8f46e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\n\nclass App extends React.Component {\n   constructor(props){\n     super(props);\n     this.state = {\n       user: {}\n      }\n     this.quotes = this.quotes;\n     this.handleQuote = this.handleQuote.bind(this);\n   }\n  handleQuote(){\n    this.setState({\n      user: this.quotes[Math.floor(Math.random() * this.quotes.length)]\n    })\n  }\n  componentDidMount(){\n    FetchQuotes().then(data => {\n      this.quotes = data;\n      this.setState({\n        user: data[Math.floor(Math.random() * this.quotes.length)]\n      })\n    })\n  }\n  render(){\n    let randomColor = Colors[Math.floor(Math.random() * Colors.length)];\n    let links = `https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text= \\\"${this.state.user.quote}\\\" --- ${this.state.user.author}`;\n    let styles = {col:{color: randomColor}, back:{background:randomColor}};\n    return (\n      <div id='wide'>\n        <div id='quote-box'>\n          <div id=\"text\" style={styles.col}>{this.state.user.quote}</div>\n          <div id=\"author\"> - {this.state.user.author}</div>\n          <div id=\"buttons\">\n            <a id=\"tweet-quote\" title=\"Tweet this quote!\" target=\"_blank\" href={links} style={styles.back}><i class=\"fa fa-twitter\"></i></a>\n            <button id=\"new-quote\" style={styles.back}onClick={this.handleQuote}>new quote</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nconst FetchQuotes = () => fetch(\n'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n  ).then(data => data.json()).then(data => data.quotes);\n\n\n\nconst Colors = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"];\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}